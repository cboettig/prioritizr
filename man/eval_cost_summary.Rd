% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_cost_summary.R
\name{eval_cost_summary}
\alias{eval_cost_summary}
\alias{eval_cost_summary.default}
\alias{eval_cost_summary.ConservationProblem}
\title{Evaluate solution cost}
\usage{
eval_cost_summary(x, solution)

\method{eval_cost_summary}{default}(x, solution)

\method{eval_cost_summary}{ConservationProblem}(x, solution)
}
\arguments{
\item{x}{\code{\link[=problem]{problem()}} (i.e. \code{\linkS4class{ConservationProblem}}) object.}

\item{solution}{\code{numeric}, \code{matrix}, \code{data.frame},
\code{\linkS4class{Raster}}, \code{\linkS4class{Spatial}},
or \code{\link[sf:sf]{sf::sf()}} object.
The argument should be in the same format as the planning unit cost
data in the argument to \code{x}.
See the Solution format section for more information.}
}
\value{
\code{\link[tibble:tibble]{tibble::tibble()}} object containing the solution cost.
It contains the following columns:

\describe{

\item{summary}{\code{character} description of the summary statistic.
The statistic associated with the \code{"overall"} value
in this column is calculated using the entire solution
(including all management zones if there are multiple zones).
If multiple management zones are present, then summary statistics
are also provided for each zone separately
(indicated using zone names).}

\item{cost}{\code{numeric} cost value.
Greater values correspond to solutions that are more costly
to implement.
Thus conservation planning exercises typically prefer solutions
with smaller values, because they are cheaper to implement
(assuming all other relevant factors, such as feature representation,
are equal).}

}
}
\description{
Calculate the total cost of a solution to a conservation planning
\code{\link[=problem]{problem()}}.
For example, if the planning unit cost data describe land acquisition costs
(USD), then the total cost would be net cost (USD) needed to acquire
all planning units selected within the solution.
}
\details{
This metric is equivalent to the \code{Cost} metric reported by the
\href{https://marxansolutions.org}{\emph{Marxan} software} (Ball \emph{et al.} 2009).
Specifically, the cost of a solution is defined as the sum of the cost
values, supplied when creating a \code{\link[=problem]{problem()}} object
(e.g. using the \code{cost_column} argument),
weighted by the status of each planning unit in the solution.
}
\section{Solution format}{

The argument to \code{solution} must be in the same format as
the planning unit data in the argument to \code{x}
(e.g. in terms of data representation, dimensionality, and spatial
attributes).
For example, if the planning unit data in \code{x} is a \code{numeric}
vector, then the argument to \code{solution} must be a \code{numeric} vector
with the same number of elements.
Similarly, if the planning units in \code{x} are a \code{data.frame}, then the
argument to \code{solution} must also be a \code{data.frame} with each
column corresponding to a different zone, each row corresponding to a
different planning unit, and cell values corresponding to the solution value.
Additionally, if the planning unit data in \code{x} is
a \code{\linkS4class{Raster}} object, then the argument to
\code{solution} must also be a \code{\linkS4class{Raster}} object with
the same dimensionality (rows and columns), resolution, extent, and
coordinate reference system.
Furthermore, if the planning unit data in \code{x} is a
\code{\linkS4class{Spatial}} or \code{\link[sf:sf]{sf::sf()}} object then the
argument to \code{solution} must also be a \code{\linkS4class{Spatial}}
or \code{\link[sf:sf]{sf::sf()}} object (respectively) with the same spatial information
(e.g. polygons and coordinate reference system), and contain columns
corresponding to different zones, and cell values corresponding to the
solution values.

The argument to \code{solution} must also have missing (\code{NA}) values for planning
units that have missing (\code{NA}) cost values.
In other words, the solution must have missing (\code{NA}) values in the
same elements, cells, or pixels (depending on the cost data format) as the
planning unit cost data.
For example, if the planning unit data are a \code{\linkS4class{Raster}} object,
then the argument to \code{solution} must have missing (\code{NA}) values in
the same pixels as the planning unit cost data.
Similarly, if the planning unit data are a
\code{\linkS4class{Spatial}}, \code{\link[sf:sf]{sf::sf()}}, or \code{data.frame} object, then
the solution must have missing (\code{NA}) values in the same cells
as the planning unit cost data columns.
If an argument is supplied to \code{solution} where
the missing (\code{NA}) values in the argument to solution do not match
those in the planning unit cost data, then an error will be thrown.
}

\examples{
\dontrun{
# set seed for reproducibility
set.seed(500)

# load data
data(sim_pu_raster, sim_pu_sf, sim_features,
     sim_pu_zones_sf, sim_features_zones)

# build minimal conservation problem with raster data
p1 <- problem(sim_pu_raster, sim_features) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions() \%>\%
      add_default_solver(verbose = FALSE)

# solve the problem
s1 <- solve(p1)

# print solution
print(s1)

# plot solution
plot(s1, main = "solution", axes = FALSE, box = FALSE)

# calculate cost of the solution
r1 <- eval_cost_summary(p1, s1)
print(r1)

# build minimal conservation problem with polygon (sf) data
p2 <- problem(sim_pu_sf, sim_features, cost_column = "cost") \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions() \%>\%
      add_default_solver(verbose = FALSE)

# solve the problem
s2 <- solve(p2)

# plot solution
plot(s2[, "solution_1"])

# print first six rows of the attribute table
print(head(s2))

# calculate cost of the solution
r2 <- eval_cost_summary(p2, s2[, "solution_1"])
print(r2)

# manually calculate cost of the solution
r2_manual <- sum(s2$solution * sim_pu_sf$cost, na.rm = TRUE)
print(r2_manual)

# build multi-zone conservation problem with polygon (sf) data
p3 <- problem(sim_pu_zones_sf, sim_features_zones,
              cost_column = c("cost_1", "cost_2", "cost_3")) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(matrix(runif(15, 0.1, 0.2), nrow = 5,
                                  ncol = 3)) \%>\%
      add_binary_decisions() \%>\%
      add_default_solver(verbose = FALSE)

# solve the problem
s3 <- solve(p3)

# print first six rows of the attribute table
print(head(s3))

# create new column representing the zone id that each planning unit
# was allocated to in the solution
s3$solution <- category_vector(
  s3[, c("solution_1_zone_1", "solution_1_zone_2", "solution_1_zone_3")])
s3$solution <- factor(s3$solution)

# plot solution
plot(s3[, "solution"])

# calculate cost of the solution
r3 <- eval_cost_summary(
  p3, s3[, c("solution_1_zone_1", "solution_1_zone_2", "solution_1_zone_3")])
print(r3)
}
}
\references{
Ball IR, Possingham HP, and Watts M (2009) \emph{Marxan and relatives:
Software for spatial conservation prioritisation} in Spatial conservation
prioritisation: Quantitative methods and computational tools. Eds Moilanen
A, Wilson KA, and Possingham HP. Oxford University Press, Oxford, UK.
}
\seealso{
\code{\link[=problem]{problem()}}, \link{summaries}.
}
