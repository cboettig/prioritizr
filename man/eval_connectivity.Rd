% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_connectivity.R
\name{eval_connectivity}
\alias{eval_connectivity}
\alias{eval_connectivity,ConservationProblem,ANY,ANY,Matrix-method}
\alias{eval_connectivity,ConservationProblem,ANY,ANY,matrix-method}
\alias{eval_connectivity,ConservationProblem,ANY,ANY,dgCMatrix-method}
\alias{eval_connectivity,ConservationProblem,ANY,ANY,data.frame-method}
\alias{eval_connectivity,ConservationProblem,ANY,ANY,array-method}
\title{Evaluate connectivity}
\usage{
\S4method{eval_connectivity}{ConservationProblem,ANY,ANY,matrix}(x, solution, zones, data)

\S4method{eval_connectivity}{ConservationProblem,ANY,ANY,Matrix}(x, solution, zones, data)

\S4method{eval_connectivity}{ConservationProblem,ANY,ANY,data.frame}(x, solution, zones, data)

\S4method{eval_connectivity}{ConservationProblem,ANY,ANY,dgCMatrix}(x, solution, zones, data)

\S4method{eval_connectivity}{ConservationProblem,ANY,ANY,array}(x, solution, zones, data)
}
\arguments{
\item{x}{\code{\link[=problem]{problem()}} (i.e. \code{\linkS4class{ConservationProblem}}) object.}

\item{solution}{\code{numeric}, \code{matrix}, \code{data.frame},
\code{\linkS4class{Raster}}, \code{\linkS4class{Spatial}},
or \code{\link[sf:sf]{sf::sf()}} object.
The argument should be in the same format as the planning unit cost
data in the argument to \code{x}.
See the Solution format section for more information.}

\item{zones}{\code{matrix} or \code{Matrix} object describing the
level of connectivity between different zones. Each row and column
corresponds to a different zone in the argument to \code{x}, and cell
values indicate the level of connectivity between each combination
of zones. Cell values along the diagonal of the matrix represent
the level of connectivity between planning units allocated to the
same zone. Cell values must lay between 1 and -1, where negative
values favor solutions with weak connectivity. The default argument to
\code{zones} is an identity matrix (i.e. a matrix with ones along the
matrix diagonal and zeros elsewhere), so that planning units are
only considered to be connected when they are allocated to the same zone.
This argument is required when the argument to \code{data} is a
\code{matrix} or \code{Matrix} object. If the argument to \code{data} is
an \code{array} or \code{data.frame} with zone data, this argument
must explicitly be set to \code{NULL} otherwise an error will be thrown.}

\item{data}{\code{matrix}, \code{Matrix}, \code{data.frame}, or
\code{array} object containing connectivity data. The connectivity values
correspond to the strength of connectivity between
different planning units. Thus connections between planning units
that are associated with higher values are more favorable in the solution.
See the Details section for more information.}
}
\value{
\code{\link[tibble:tibble]{tibble::tibble()}} object describing the connectivity of the
solution.
It contains the following columns:

\describe{

\item{statistic}{\code{character} description of the connectivity statistic.
The connectivity statistic associated with the \code{"overall"} value
in this column is calculated using entire solution
(including all management zones if there are multiple zones).
If multiple management zones are present, then connectivity statistics
are also provided for each zone separately. In such cases,
these statistics are associated with values, in this column,
that correspond to the zone names.}

\item{connectivity}{\code{numeric} connectivity value.
Greater values correspond to solutions associated with greater
connectivity.
Thus conservation planning exercises typically prefer solutions
with greater values.}

}
}
\description{
Calculate the connectivity held within a solution to a conservation
planning \code{\link[=problem]{problem()}}.
This metric evaluates the connectivity of a solution using
pair-wise connectivity values between combinations of planning units.
}
\details{
This metric is comparable to the \code{Connectivity_In} metric reported by the
\href{https://marxansolutions.org}{\emph{Marxan} software} (Ball \emph{et al.} 2009).
It is calculated using the same equations used to penalize solutions
with connectivity data (i.e. \code{\link[=add_connectivity_penalties]{add_connectivity_penalties()}}).
Specifically, it is calculated as the sum of the pair-wise connectivity
values in the argument to \code{data}, weighted by the value of the planning
units in the solution.
}
\section{Solution format}{

The argument to \code{solution} must be in the same format as
the planning unit data in the argument to \code{x}
(e.g. in terms of data representation, dimensionality, and spatial
attributes).
For example, if the planning unit data in \code{x} is a \code{numeric}
vector, then the argument to \code{solution} must be a \code{numeric} vector
with the same number of elements.
Similarly, if the planning units in \code{x} are a \code{data.frame}, then the
argument to \code{solution} must also be a \code{data.frame} with each
column corresponding to a different zone, each row corresponding to a
different planning unit, and cell values corresponding to the solution value.
Additionally, if the planning unit data in \code{x} is
a \code{\linkS4class{Raster}} object, then the argument to
\code{solution} must also be a \code{\linkS4class{Raster}} object with
the same dimensionality (rows and columns), resolution, extent, and
coordinate reference system.
Furthermore, if the planning unit data in \code{x} is a
\code{\linkS4class{Spatial}} or \code{\link[sf:sf]{sf::sf()}} object then the
argument to \code{solution} must also be a \code{\linkS4class{Spatial}}
or \code{\link[sf:sf]{sf::sf()}} object (respectively) with the same spatial information
(e.g. polygons and coordinate reference system), and contain columns
corresponding to different zones, and cell values corresponding to the
solution values.

The argument to \code{solution} must also have missing (\code{NA}) values for planning
units that have missing (\code{NA}) cost values.
In other words, the solution must have missing (\code{NA}) values in the
same elements, cells, or pixels (depending on the cost data format) as the
planning unit cost data.
For example, if the planning unit data are a \code{\linkS4class{Raster}} object,
then the argument to \code{solution} must have missing (\code{NA}) values in
the same pixels as the planning unit cost data.
Similarly, if the planning unit data are a
\code{\linkS4class{Spatial}}, \code{\link[sf:sf]{sf::sf()}}, or \code{data.frame} object, then
the solution must have missing (\code{NA}) values in the same cells
as the planning unit cost data columns.
If an argument is supplied to \code{solution} where
the missing (\code{NA}) values in the argument to solution do not match
those in the planning unit cost data, then an error will be thrown.
}

\examples{
\dontrun{
# set seed for reproducibility
set.seed(500)

# load data
data(sim_pu_raster, sim_pu_sf, sim_features,
     sim_pu_zones_sf, sim_features_zones)

# build minimal conservation problem with raster data
p1 <- problem(sim_pu_raster, sim_features) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions()

# solve the problem
s1 <- solve(p1)

# print solution
print(s1)

# plot solution
plot(s1, main = "solution", axes = FALSE, box = FALSE)

# simulate a connectivity matrix to describe the relative strength
# of connectivity between different planning units
# for brevity, we will use cost data here so that pairs
# of adjacent planning units with higher cost values will have a
# higher connectivity value
# (but see ?connectivity_matrix for more information)
cm1 <- connectivity_matrix(sim_pu_raster)

# calculate connectivity associated with the solution
r1 <- eval_connectivity(p1, s1, data = cm1)
print(r1)

# build minimal conservation problem with polygon (sf) data
p2 <- problem(sim_pu_sf, sim_features, cost_column = "cost") \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions()

# solve the problem
s2 <- solve(p2)

# print first six rows of the attribute table
print(head(s2))

# plot solution
plot(s2[, "solution_1"])

# simulate connectivity matrix
# here, we will generate connectivity values randomly
# between all pairs of planning units
cm2 <- matrix(runif(nrow(sim_pu_sf) ^ 2), nrow = nrow(sim_pu_sf))

# calculate connectivity associated with the solution
r2 <- eval_connectivity(p2, s2[, "solution_1"], data = cm2)
print(r2)

# build multi-zone conservation problem with polygon (sf) data
p3 <- problem(sim_pu_zones_sf, sim_features_zones,
              cost_column = c("cost_1", "cost_2", "cost_3")) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(matrix(runif(15, 0.1, 0.2), nrow = 5,
                                  ncol = 3)) \%>\%
      add_binary_decisions()

# solve the problem
s3 <- solve(p3)

# print first six rows of the attribute table
print(head(s3))

# create new column representing the zone id that each planning unit
# was allocated to in the solution
s3$solution <- category_vector(s3[, c("solution_1_zone_1",
                                      "solution_1_zone_2",
                                      "solution_1_zone_3")])
s3$solution <- factor(s3$solution)

# plot solution
plot(s3[, "solution"])

# simulate connectivity matrix
# here, we will add a new column to sim_pu_zones_sf with
# randomly simulated values and create a connectivity matrix
# based on the average simulated values of adjacent planning units
sim_pu_zones_sf$con <- runif(nrow(sim_pu_zones_sf))
cm3 <- connectivity_matrix(sim_pu_zones_sf, "con")

# calculate connectivity associated with the solution
r3 <- eval_connectivity(
  p3, s3[, c("solution_1_zone_1", "solution_1_zone_2", "solution_1_zone_3")],
  data = cm3)
print(r3)

}
}
\references{
Ball IR, Possingham HP, and Watts M (2009) \emph{Marxan and relatives:
Software for spatial conservation prioritisation} in Spatial conservation
prioritisation: Quantitative methods and computational tools. Eds Moilanen
A, Wilson KA, and Possingham HP. Oxford University Press, Oxford, UK.
}
\seealso{
\code{\link[=problem]{problem()}}, \link{evaluation}, \code{\link[=add_connectivity_penalties]{add_connectivity_penalties()}}.
}
