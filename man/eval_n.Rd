% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_n.R
\name{eval_n}
\alias{eval_n}
\alias{eval_n.default}
\alias{eval_n.ConservationProblem}
\title{Evaluate number of planning units selected.}
\usage{
eval_n(x, solution)

\method{eval_n}{default}(x, solution)

\method{eval_n}{ConservationProblem}(x, solution)
}
\arguments{
\item{x}{\code{\link[=problem]{problem()}} (i.e. \code{\linkS4class{ConservationProblem}}) object.}

\item{solution}{\code{numeric}, \code{matrix}, \code{data.frame},
\code{\linkS4class{Raster}}, \code{\linkS4class{Spatial}},
or \code{\link[sf:sf]{sf::sf()}} object.
The argument should be in the same format as the planning unit cost
data in the argument to \code{x}.
See the Solution format section for more information.}
}
\value{
\code{\link[tibble:tibble]{tibble::tibble()}} object containing the number of planning
units selected within a solution.
It contains the following columns:

\describe{

\item{statistic}{\code{character} description of the statistic.
The statistic associated with the \code{"overall"} value
in this column is calculated using entire solution
(including all management zones if there are multiple zones).
If multiple management zones are present, then statistics
are also provided for each zone separately. In such cases,
these statistics are associated with values, in this column,
that correspond to the zone names.}

\item{n}{\code{numeric} number of selected planning units.}

}
}
\description{
Calculate the number of planning units selected within a solution
to a conservation planning \code{\link[=problem]{problem()}}.
}
\details{
This metric is calculated as the sum of the values in
the solution. As a consequence, this metric can produce a
non-integer value (e.g. 4.3) for solutions containing proportion values
(e.g. generated by solving a \code{\link[=problem]{problem()}} built using the
\code{\link[=add_proportion_decisions]{add_proportion_decisions()}} function).
}
\section{Solution format}{

The argument to \code{solution} must be in the same format as
the planning unit data in the argument to \code{x}
(e.g. in terms of data representation, dimensionality, and spatial
attributes).
For example, if the planning unit data in \code{x} is a \code{numeric}
vector, then the argument to \code{solution} must be a \code{numeric} vector
with the same number of elements.
Similarly, if the planning units in \code{x} are a \code{data.frame}, then the
argument to \code{solution} must also be a \code{data.frame} with each
column corresponding to a different zone, each row corresponding to a
different planning unit, and cell values corresponding to the solution value.
Additionally, if the planning unit data in \code{x} is
a \code{\linkS4class{Raster}} object, then the argument to
\code{solution} must also be a \code{\linkS4class{Raster}} object with
the same dimensionality (rows and columns), resolution, extent, and
coordinate reference system.
Furthermore, if the planning unit data in \code{x} is a
\code{\linkS4class{Spatial}} or \code{\link[sf:sf]{sf::sf()}} object then the
argument to \code{solution} must also be a \code{\linkS4class{Spatial}}
or \code{\link[sf:sf]{sf::sf()}} object (respectively) with the same spatial information
(e.g. polygons and coordinate reference system), and contain columns
corresponding to different zones, and cell values corresponding to the
solution values.

The argument to \code{solution} must also have missing (\code{NA}) values for planning
units that have missing (\code{NA}) cost values.
In other words, the solution must have missing (\code{NA}) values in the
same elements, cells, or pixels (depending on the cost data format) as the
planning unit cost data.
For example, if the planning unit data are a \code{\linkS4class{Raster}} object,
then the argument to \code{solution} must have missing (\code{NA}) values in
the same pixels as the planning unit cost data.
Similarly, if the planning unit data are a
\code{\linkS4class{Spatial}}, \code{\link[sf:sf]{sf::sf()}}, or \code{data.frame} object, then
the solution must have missing (\code{NA}) values in the same cells
as the planning unit cost data columns.
If an argument is supplied to \code{solution} where
the missing (\code{NA}) values in the argument to solution do not match
those in the planning unit cost data, then an error will be thrown.
}

\examples{
\dontrun{
# set seed for reproducibility
set.seed(500)

# load data
data(sim_pu_raster, sim_pu_sf, sim_features,
     sim_pu_zones_sf, sim_features_zones)

# build minimal conservation problem with raster data
p1 <- problem(sim_pu_raster, sim_features) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions()

# solve the problem
s1 <- solve(p1)

# print solution
print(s1)

# plot solution
plot(s1, main = "solution", axes = FALSE, box = FALSE)

# calculate number of selected planning units within solution
r1 <- eval_n(p1, s1)
print(r1)

# build minimal conservation problem with polygon (sf) data
p2 <- problem(sim_pu_sf, sim_features, cost_column = "cost") \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions()

# solve the problem
s2 <- solve(p2)

# plot solution
plot(s2[, "solution_1"])

# print first six rows of the attribute table
print(head(s2))

# calculate number of selected planning units within solution
r2 <- eval_n(p2, s2[, "solution_1"])
print(r2)

# manually calculate number of selected planning units
r2_manual <- sum(s2$solution, na.rm = TRUE)
print(r2_manual)

# build multi-zone conservation problem with polygon (sf) data
p3 <- problem(sim_pu_zones_sf, sim_features_zones,
              cost_column = c("cost_1", "cost_2", "cost_3")) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(matrix(runif(15, 0.1, 0.2), nrow = 5,
                                  ncol = 3)) \%>\%
      add_binary_decisions()

# solve the problem
s3 <- solve(p3)

# print first six rows of the attribute table
print(head(s3))

# create new column representing the zone id that each planning unit
# was allocated to in the solution
s3$solution <- category_vector(s3[, c("solution_1_zone_1",
                                      "solution_1_zone_2",
                                      "solution_1_zone_3")])
s3$solution <- factor(s3$solution)

# plot solution
plot(s3[, "solution"])

# calculate number of selected planning units within solution
r3 <- eval_n(p3, s3[, c("solution_1_zone_1",
                        "solution_1_zone_2",
                        "solution_1_zone_3")])
print(r3)
}
}
\seealso{
\code{\link[=problem]{problem()}}, \link{evaluation}.
}
